$script = <<SCRIPT

set -e

cat >> ~/.profile << EOF
export LANG=C
export LC_CTYPE=C
EOF

# set ANDROID variables
export ANDROID_SDK_TOOLS_VERSION=3859397
export ANDROID_BUILD_TOOLS_VERSION=26.0.0
export ANDROID_PLATFORM_VERSION=22
export ANDROID_NDK_VERSION=r15c

# update Apt repository
sudo apt-get update

# install base dependencies
sudo apt-get --assume-yes install make \
  librsvg2-bin xsltproc \
  imagemagick gettext ffmpeg \
  git quilt zip \
  m4 automake
sudo apt-get clean

# install Manual dependencies
sudo apt-get --assume-yes install texlive \
  texlive-latex-extra \
  texlive-luatex \
  texlive-lang-french \
  texlive-lang-polish \
  texlive-lang-german \
  liblocale-po-perl
sudo apt-get clean

# install dependencies for the Linux target
sudo apt-get --assume-yes install make g++ \
  zlib1g-dev \
  libfreetype6-dev \
  libpng-dev libjpeg-dev \
  libtiff5-dev libgeotiff-dev \
  libcurl4-openssl-dev \
  liblua5.2-dev lua5.2-dev \
  libxml-parser-perl \
  libasound2-dev \
  librsvg2-bin xsltproc \
  imagemagick gettext \
  mesa-common-dev libgl1-mesa-dev libegl1-mesa-dev \
  fonts-dejavu
sudo apt-get clean

# install dependencies for compiling with LLVM / Clang
sudo apt-get --assume-yes install llvm clang libc++-dev
sudo apt-get clean

# install dependencies for compiling targets which need libinput or GBM
sudo apt-get --assume-yes install libinput-dev libgbm-dev
sudo apt-get clean

# install dependencies for ARM Linux targets
sudo apt-get --assume-yes install g++-arm-linux-gnueabihf
sudo apt-get clean

# install PC/WIN64 dependencies
sudo apt-get --assume-yes install g++-mingw-w64
sudo apt-get clean

# install dependencies for the Android target
sudo apt --assume-yes install default-jdk-headless ant vorbis-tools
if [ ! -d ~/opt/android-sdk-linux ]
then
  cd /tmp
  wget --progress=bar:force:noscroll https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS_VERSION}.zip
  mkdir -p ~/opt/android-sdk-linux/licenses
  cd ~/opt/android-sdk-linux
  unzip /tmp/sdk-tools-linux-${ANDROID_SDK_TOOLS_VERSION}.zip
  rm /tmp/sdk-tools-linux-${ANDROID_SDK_TOOLS_VERSION}.zip
  echo -e "\n8933bad161af4178b1185d1a37fbf41ea5269c55" > licenses/android-sdk-license
fi
cd ~/opt/android-sdk-linux
echo "Installing Android SDK packages..."
tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS_VERSION}" "platforms;android-${ANDROID_PLATFORM_VERSION}"
if [ ! -d ~/opt/android-ndk-${ANDROID_NDK_VERSION} ]
then
  cd /tmp
  wget --progress=bar:force:noscroll https://dl.google.com/android/repository/android-ndk-${ANDROID_NDK_VERSION}-linux-x86_64.zip
  cd ~/opt
  rm -rf ~/opt/android-ndk-${ANDROID_NDK_VERSION}
  unzip /tmp/android-ndk-${ANDROID_NDK_VERSION}-linux-x86_64.zip
  rm /tmp/android-ndk-${ANDROID_NDK_VERSION}-linux-x86_64.zip
fi

SCRIPT

Vagrant.configure("2") do |config|
    config.vm.box = "ubuntu/xenial64"

    config.vm.network "private_network", type: "dhcp"
    config.vm.synced_folder "../..", "/xcsoar-src"

    config.vm.provider "virtualbox" do |v|
        host = RbConfig::CONFIG['host_os']

        v.name = "xcsoar-" + Time.now.strftime("%y%m%d%H%M")

        # Give VM 1/2 system memory & access to all cpu cores on the host
        if host =~ /darwin/
            cpus = `sysctl -n hw.ncpu`.to_i
            # sysctl returns Bytes and we need to convert to MB
            mem = `sysctl -n hw.memsize`.to_i / 1024 / 1024 / 2

        elsif host =~ /linux/
            cpus = `nproc`.to_i
            # meminfo shows KB and we need to convert to MB
            mem = `grep 'MemTotal' /proc/meminfo | sed -e 's/MemTotal://' -e 's/ kB//'`.to_i / 1024 / 2

        else
            cpus = 4
            mem = 2048
        end

        v.customize ["modifyvm", :id, "--memory", mem]
        v.customize ["modifyvm", :id, "--cpus", cpus]

        # Decrease VirtualBox timesync threshold to 500 ms
        v.customize ["guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold", 500]
    end

    config.vm.provision "shell", inline: $script, privileged: false
end
